!function(e){"function"==typeof define&&define.amd?define(e):e()}(function(){const e={version:"0.0.0",name:"x-views",views:{},settings:{enabled:!1,basepath:"/",selector:"#content",notfound:null},init(e){if(this.version!==window.PineconeRouter.version)throw new Error(`Pinecone Router ${this.name}: This middleware was built for Pinecone Router v${this.version}, found v${window.PineconeRouter.version}`);if(null!=window.PineconeRouterMiddlewares.find(e=>"x-render"==e.name))throw new Error(`Pinecone Router ${this.name}: Cannot use x-views along with x-render.`);if(e.$el.hasAttribute("x-views")){this.settings.enabled=!0;let n=e.$el.getAttribute("x-views");if("body"==n)throw new Error(`Pinecone Router ${this.name}: Do not use body as the selector, it will cause the router component to be removed`);""!=n&&(this.settings.selector=n),window.PineconeRouter.notfound=null,window.PineconeRouter.settings.allowNoHandler=!0}},onBeforeRouteProcessed(e,n,t){if(this.settings.enabled){if(0==e.hasAttribute("x-view"))throw new Error(`Pinecone Router ${this.name}: route must have an x-view attribute when using x-views.`);let n=e.getAttribute("x-view");"/"!=this.settings.basepath&&(n=this.settings.basepath+n),"notfound"==t?this.settings.notfound=n:this.views[t]=n}},onLinkIntercepted(e){},onHandlersExecuted(e,n,t,i){if(this.settings.enabled){let n=i?this.settings.notfound:this.views[e.path];if(null==n)return;fetch(n).then(e=>e.text()).then(e=>{var n;return n=e,document.querySelector(this.settings.selector).innerHTML=n,window.PineconeRouter.interceptLinks(),window.dispatchEvent(window.PineconeRouter.loadend),!1})}}};null==window.PineconeRouterMiddlewares?window.PineconeRouterMiddlewares=[e]:window.PineconeRouterMiddlewares.push(e)});
//# sourceMappingURL=index.umd.js.map
