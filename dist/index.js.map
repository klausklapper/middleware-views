{"version":3,"file":"index.js","sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import type { Middleware } from 'pinecone-router';\nimport { renderContent } from './utils.js';\n\nconst PineconeRouterMiddleware: Middleware = {\n\t/**\n\t * @property {string} version the version of Pinecone Router this middleware is made for.\n\t */\n\tversion: '1.0.0',\n\n\t/**\n\t * @property {string} name the name of the middleware.\n\t */\n\tname: 'views',\n\n\t/**\n\t * @summary it hold the views of each route.\n\t * the route being the index and value is its view.\n\t */\n\tviews: <{ [key: string]: string }>{},\n\n\t/**\n\t * @property {{[key: string]: string}} settings the middleware settings.\n\t */\n\tsettings: <{ [key: string]: any }>{\n\t\tenable: false,\n\t\tbasePath: '/',\n\t\tselector: '#app',\n\t\t/**\n\t\t * @type {string}\n\t\t * @summary the 404 view\n\t\t */\n\t\tnotfound: null,\n\t},\n\n\t/**\n\t * @event pinecone-start\n\t * @summary be dispatched to the window after before page start loading.\n\t */\n\tloadStart: new Event('pinecone-start'),\n\n\t/**\n\t * @event pinecone-end\n\t * @summary will be dispatched to the window after the views are fetched\n\t */\n\tloadEnd: new Event('pinecone-end'),\n\n\t/**\n\t * This will be called at router initialization.\n\t * used for detecting router settings.\n\t */\n\tinit(_component, settings) {\n\t\tif (settings.middlewares?.render) {\n\t\t\tthrow new Error(\n\t\t\t\t`Pinecone Router ${this.name}: Cannot use views middleware along with render.`\n\t\t\t);\n\t\t}\n\n\t\t//load settings\n\t\tthis.settings = {\n\t\t\t...this.settings,\n\t\t\t...(settings.middlewares[<any>this.name] ?? {}),\n\t\t};\n\n\t\tif (this.settings?.selector == 'body') {\n\t\t\tthrow new Error(\n\t\t\t\t`Pinecone Router ${this.name}: Do not use body as the selector, it will cause the router component to be removed`\n\t\t\t);\n\t\t}\n\n\t\twindow.PineconeRouter.settings.allowNoHandler = true;\n\t},\n\n\t/**\n\t * Called for each route during initialization,\n\t * before the route is processed & added.\n\t */\n\tonBeforeRouteProcessed(el, _component, path) {\n\t\tif (this.settings!.enable) {\n\t\t\t// TODO: try to set the view using `href` attribute\n\t\t\t// to see if Vite detects it and transform the url on build\n\t\t\tif (el.hasAttribute('x-view') == false) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Pinecone Router ${this.name}: route must have an x-view attribute when using x-views.`\n\t\t\t\t);\n\t\t\t}\n\t\t\tlet view = el.getAttribute('x-view');\n\t\t\tif (this.settings!.basePath != '/') {\n\t\t\t\tview = this.settings!.basePath + view;\n\t\t\t}\n\n\t\t\tif (path == 'notfound') {\n\t\t\t\tthis.settings!.notfound = view;\n\t\t\t} else {\n\t\t\t\tthis.views[path] = view;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Will be called after the handlers are executed and done.\n\t * during navigation inside PineconeRouter.navigate().\n\t *\n\t */\n\tonHandlersExecuted(route) {\n\t\tif (this.settings!.enable) {\n\t\t\tlet view = !route ? this.settings!.notfound : this.views[route.path];\n\t\t\tif (view == null) return;\n\t\t\tfetch(view)\n\t\t\t\t.then((response) => {\n\t\t\t\t\treturn response.text();\n\t\t\t\t})\n\t\t\t\t.then((response) => {\n\t\t\t\t\trenderContent(response, this.settings!.selector);\n\t\t\t\t\twindow.dispatchEvent(this.loadEnd);\n\t\t\t\t\treturn false;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tdocument\n\t\t\t\t\t\t.querySelector('[x-router][x-data]')!\n\t\t\t\t\t\t.dispatchEvent(\n\t\t\t\t\t\t\tnew CustomEvent('fetch-error', { detail: error })\n\t\t\t\t\t\t);\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`Pinecone Router ${this.name}: Fetch Error: ${error}`\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t}\n\t},\n\n\tonBeforeHandlersExecuted(_route) {\n\t\twindow.dispatchEvent(this.loadStart);\n\t},\n};\n\nif (window.PineconeRouterMiddlewares == null)\n\twindow.PineconeRouterMiddlewares = [PineconeRouterMiddleware];\nelse window.PineconeRouterMiddlewares.push(PineconeRouterMiddleware);\n","/**\n * This will replace the content fetched from `path` into `selector`.\n * The content is assumed to not be an entire html page but a chunk of it.\n */\nexport function renderContent(content: string, selector: string) {\n\t// replace the content of the selector with the fetched content\n\tdocument.querySelector(selector)!.innerHTML = content;\n}\n"],"names":["PineconeRouterMiddleware","version","name","views","settings","enable","basePath","selector","notfound","loadStart","Event","loadEnd","init","_component","middlewares","_settings$middlewares","render","Error","this","window","PineconeRouter","allowNoHandler","onBeforeRouteProcessed","el","path","hasAttribute","view","getAttribute","onHandlersExecuted","route","fetch","then","response","text","content","document","querySelector","_this","innerHTML","dispatchEvent","catch","error","CustomEvent","detail","console","onBeforeHandlersExecuted","_route","PineconeRouterMiddlewares","push"],"mappings":"+MAGA,IAAMA,EAAuC,CAI5CC,QAAS,QAKTC,KAAM,QAMNC,MAAkC,GAKlCC,SAAkC,CACjCC,QAAQ,EACRC,SAAU,IACVC,SAAU,OAKVC,SAAU,MAOXC,UAAW,IAAIC,MAAM,kBAMrBC,QAAS,IAAID,MAAM,gBAMnBE,cAAKC,EAAYT,aAChB,YAAIA,EAASU,cAATC,EAAsBC,OACzB,UAAUC,yBACUC,KAAKhB,yDAU1B,GALAgB,KAAKd,cACDc,KAAKd,kBACJA,EAASU,YAAiBI,KAAKhB,SAAS,IAGd,uBAAtBE,mBAAUG,UAClB,UAAUU,yBACUC,KAAKhB,4FAI1BiB,OAAOC,eAAehB,SAASiB,gBAAiB,GAOjDC,gCAAuBC,EAAIV,EAAYW,GACtC,GAAIN,KAAKd,SAAUC,OAAQ,CAG1B,GAAiC,GAA7BkB,EAAGE,aAAa,UACnB,UAAUR,yBACUC,KAAKhB,kEAG1B,IAAIwB,EAAOH,EAAGI,aAAa,UACI,KAA3BT,KAAKd,SAAUE,WAClBoB,EAAOR,KAAKd,SAAUE,SAAWoB,GAGtB,YAARF,EACHN,KAAKd,SAAUI,SAAWkB,EAE1BR,KAAKf,MAAMqB,GAAQE,IAUtBE,4BAAmBC,cAClB,GAAIX,KAAKd,SAAUC,OAAQ,CAC1B,IAAIqB,EAAQG,EAAkCX,KAAKf,MAAM0B,EAAML,MAA3CN,KAAKd,SAAUI,SACnC,GAAY,MAARkB,EAAc,OAClBI,MAAMJ,GACJK,KAAK,SAACC,GACN,OAAOA,EAASC,SAEhBF,KAAK,SAACC,OC3GmBE,ED8GzB,OC9GyBA,ED4GXF,EC1GlBG,SAASC,cD0GmBC,EAAKjC,SAAUG,UC1GT+B,UAAYJ,ED2G1Cf,OAAOoB,cAAcF,EAAK1B,cAG1B6B,MAAM,SAACC,GACPN,SACEC,cAAc,sBACdG,cACA,IAAIG,YAAY,cAAe,CAAEC,OAAQF,KAE3CG,QAAQH,yBACYJ,EAAKnC,uBAAsBuC,OAMnDI,kCAAyBC,GACxB3B,OAAOoB,cAAcrB,KAAKT,aAIY,MAApCU,OAAO4B,0BACV5B,OAAO4B,0BAA4B,CAAC/C,GAChCmB,OAAO4B,0BAA0BC,KAAKhD"}