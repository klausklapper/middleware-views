{"version":3,"file":"index.js","sources":["../src/index.js","../src/utils.js"],"sourcesContent":["import { renderContent } from './utils.js';\n\nconst PineconeRouterMiddleware = {\n\t/**\n\t * @property {string} version the version of Pinecone Router this middleware is made for.\n\t */\n\tversion: '0.0.0',\n\n\t/**\n\t * @property {string} name the name of the middleware.\n\t */\n\tname: 'x-views',\n\n\t/**\n\t * @type {object}\n\t * @summary it hold the views of each route.\n\t * the route being the index and value is its view.\n\t */\n\tviews: {},\n\n\t/**\n\t * @property {object} settings the middleware settings.\n\t */\n\tsettings: {\n\t\tenabled: false,\n\t\tbasepath: '/',\n\t\tselector: '#content',\n\t\t/**\n\t\t * @type {string}\n\t\t * @summary the 404 view\n\t\t */\n\t\tnotfound: null,\n\t},\n\n\t/**\n\t * This will be called at router initialization.\n\t * used for detecting router settings.\n\t * @param {object} component the router's alpine component.\n\t */\n\tinit(component) {\n\t\tif (this.version !== window.PineconeRouter.version) {\n\t\t\tthrow new Error(\n\t\t\t\t`Pinecone Router ${this.name}: This middleware was built for Pinecone Router v${this.version}, found v${window.PineconeRouter.version}`\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\twindow.PineconeRouterMiddlewares.find(\n\t\t\t\t(m) => m.name == 'x-render'\n\t\t\t) != null\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t`Pinecone Router ${this.name}: Cannot use x-views along with x-render.`\n\t\t\t);\n\t\t}\n\n\t\t// views rendering, unlike page rendering\n\t\t// they wont be loaded automatically using path\n\t\t// instead the user decide the view using x-view for each route\n\t\tif (component.$el.hasAttribute('x-views')) {\n\t\t\tthis.settings.enabled = true;\n\t\t\t// check if the selector was set, else default to 'body'\n\t\t\tlet selector = component.$el.getAttribute('x-views');\n\t\t\tif (selector == 'body') {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Pinecone Router ${this.name}: Do not use body as the selector, it will cause the router component to be removed`\n\t\t\t\t);\n\t\t\t} else if (selector != '') {\n\t\t\t\tthis.settings.selector = selector;\n\t\t\t}\n\n\t\t\t// this will disable notfound handling in favor of 404 view\n\t\t\t// this can be ovewritten if needed by making a notfound route with a handler\n\t\t\twindow.PineconeRouter.notfound = null;\n\t\t\twindow.PineconeRouter.settings.allowNoHandler = true;\n\t\t}\n\t},\n\n\t/**\n\t * Called for each route during initalization,\n\t * before the route is processed & added.\n\t * @param {Element} el the route's <template> element\n\t * @param {object} _component the router's alpine component\n\t * @param {string} path the route's path\n\t */\n\tonBeforeRouteProcessed(el, _component, path) {\n\t\tif (this.settings.enabled) {\n\t\t\t// TODO: try to set the view using `href` attribute\n\t\t\t// to see if Vite detects it and transform the url on build\n\t\t\tif (el.hasAttribute('x-view') == false) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Pinecone Router ${this.name}: route must have an x-view attribute when using x-views.`\n\t\t\t\t);\n\t\t\t}\n\t\t\tlet view = el.getAttribute('x-view');\n\t\t\tif (this.settings.basepath != '/') {\n\t\t\t\tview = this.settings.basepath + view;\n\t\t\t}\n\n\t\t\tif (path == 'notfound') {\n\t\t\t\tthis.settings.notfound = view;\n\t\t\t} else {\n\t\t\t\tthis.views[path] = view;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * This will be called during PineconeRouter.interceptLinks() function\n\t * after the link is checked as a valid navigation link.\n\t * @param {Element} _el the anchor element\n\t */\n\tonLinkIntercepted(_el) {},\n\n\t/**\n\t * Will be called after the handlers are executed and done.\n\t * during navigation inside PineconeRouter.navigate().\n\t * @param {object} route the matched route, null if not found.\n\t * @param {string} _path the path visited by the client\n\t * @param {boolean} _firstload first page load and not link navigation request\n\t * @param {boolean} notfound set to true if the route wasnt found\n\t * @returns {boolean} false to make the navigate function exit (make sure to send the loadend event); none to continute execution.\n\t */\n\tonHandlersExecuted(route, _path, _firstload, notfound) {\n\t\tif (this.settings.enabled) {\n\t\t\tlet view = notfound\n\t\t\t\t? this.settings.notfound\n\t\t\t\t: this.views[route.path];\n\n\t\t\tif (view == null) return;\n\t\t\tfetch(view)\n\t\t\t\t.then((response) => {\n\t\t\t\t\treturn response.text();\n\t\t\t\t})\n\t\t\t\t.then((response) => {\n\t\t\t\t\trenderContent(response, this.settings.selector);\n\t\t\t\t\twindow.PineconeRouter.interceptLinks();\n\t\t\t\t\twindow.dispatchEvent(window.PineconeRouter.loadend);\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t}\n\t},\n};\n\nif (window.PineconeRouterMiddlewares == null)\n\twindow.PineconeRouterMiddlewares = [PineconeRouterMiddleware];\nelse window.PineconeRouterMiddlewares.push(PineconeRouterMiddleware);\n","/**\n * This will replace the content fetched from `path` into `selector`.\n * The content is assumed to not be an entire html page but a chunk of it.\n * @param {string} content the html content.\n * @param {string} selector the selector of where to put the content.\n */\nexport function renderContent(content, selector) {\n\t// replace the content of the selector with the fetched content\n\tdocument.querySelector(selector).innerHTML = content;\n}\n"],"names":["PineconeRouterMiddleware","version","name","views","settings","enabled","basepath","selector","notfound","init","component","this","window","PineconeRouter","Error","PineconeRouterMiddlewares","find","m","$el","hasAttribute","getAttribute","allowNoHandler","onBeforeRouteProcessed","el","_component","path","view","onLinkIntercepted","_el","onHandlersExecuted","route","_path","_firstload","fetch","then","response","text","content","document","querySelector","innerHTML","interceptLinks","dispatchEvent","loadend","push"],"mappings":"AAEA,MAAMA,EAA2B,CAIhCC,QAAS,QAKTC,KAAM,UAONC,MAAO,GAKPC,SAAU,CACTC,SAAS,EACTC,SAAU,IACVC,SAAU,WAKVC,SAAU,MAQXC,KAAKC,GACJ,GAAIC,KAAKV,UAAYW,OAAOC,eAAeZ,QAC1C,UAAUa,MACR,mBAAkBH,KAAKT,wDAAwDS,KAAKV,mBAAmBW,OAAOC,eAAeZ,WAIhI,GAGM,MAFLW,OAAOG,0BAA0BC,KAC/BC,GAAgB,YAAVA,EAAEf,MAGV,UAAUY,MACR,mBAAkBH,KAAKT,iDAO1B,GAAIQ,EAAUQ,IAAIC,aAAa,WAAY,CAC1CR,KAAKP,SAASC,SAAU,EAExB,IAAIE,EAAWG,EAAUQ,IAAIE,aAAa,WAC1C,GAAgB,QAAZb,EACH,UAAUO,MACR,mBAAkBH,KAAKT,2FAEH,IAAZK,IACVI,KAAKP,SAASG,SAAWA,GAK1BK,OAAOC,eAAeL,SAAW,KACjCI,OAAOC,eAAeT,SAASiB,gBAAiB,IAWlDC,uBAAuBC,EAAIC,EAAYC,GACtC,GAAId,KAAKP,SAASC,QAAS,CAG1B,GAAiC,GAA7BkB,EAAGJ,aAAa,UACnB,UAAUL,MACR,mBAAkBH,KAAKT,iEAG1B,IAAIwB,EAAOH,EAAGH,aAAa,UACG,KAA1BT,KAAKP,SAASE,WACjBoB,EAAOf,KAAKP,SAASE,SAAWoB,GAGrB,YAARD,EACHd,KAAKP,SAASI,SAAWkB,EAEzBf,KAAKR,MAAMsB,GAAQC,IAUtBC,kBAAkBC,KAWlBC,mBAAmBC,EAAOC,EAAOC,EAAYxB,GAC5C,GAAIG,KAAKP,SAASC,QAAS,CAC1B,IAAIqB,EAAOlB,EACRG,KAAKP,SAASI,SACdG,KAAKR,MAAM2B,EAAML,MAEpB,GAAY,MAARC,EAAc,OAClBO,MAAMP,GACJQ,KAAMC,GACCA,EAASC,QAEhBF,KAAMC,QChImBE,EDoIzB,OCpIyBA,EDiIXF,EC/HlBG,SAASC,cD+HmB5B,KAAKP,SAASG,UC/HTiC,UAAYH,EDgIzCzB,OAAOC,eAAe4B,iBACtB7B,OAAO8B,cAAc9B,OAAOC,eAAe8B,iBAOR,MAApC/B,OAAOG,0BACVH,OAAOG,0BAA4B,CAACf,GAChCY,OAAOG,0BAA0B6B,KAAK5C"}