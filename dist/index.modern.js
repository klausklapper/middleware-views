function e(){return(e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}const t={version:"1.1.0",name:"Views",views:{},settings:{enable:!1,basePath:"/",selector:"#app",notfound:null},loadStart:new Event("pinecone-start"),loadEnd:new Event("pinecone-end"),init(t,n){var o,s,i;if(null!=(o=n.middlewares)&&o.render)throw new Error(`Pinecone Router ${this.name}: Cannot use views middleware along with render.`);if(this.settings=e({},this.settings,null!=(s=n.middlewares[this.name])?s:{}),"body"==(null==(i=this.settings)?void 0:i.selector))throw new Error(`Pinecone Router ${this.name}: Do not use body as the selector, it will cause the router component to be removed`);window.PineconeRouter.settings.allowNoHandler=!0},onBeforeRouteProcessed(e,t,n){if(this.settings.enable&&(console.log({el:e}),e.hasAttribute("x-view"))){console.log("hasview");let t=e.getAttribute("x-view");"/"!=this.settings.basePath&&(t=this.settings.basePath+t),"notfound"==n?this.settings.notfound=t:this.views[n]=t}},onHandlersExecuted(e){if(this.settings.enable){let t=e?this.views[e.path]?this.views[e.path]:null:this.settings.notfound;if(null==t)return;fetch(t).then(e=>e.text()).then(e=>{var t;return t=e,document.querySelector(this.settings.selector).innerHTML=t,window.dispatchEvent(this.loadEnd),!1}).catch(e=>{document.querySelector("[x-router][x-data]").dispatchEvent(new CustomEvent("fetch-error",{detail:e})),console.error(`Pinecone Router ${this.name}: Fetch Error: ${e}`)})}},onBeforeHandlersExecuted(e){window.dispatchEvent(this.loadStart)}};null==window.PineconeRouterMiddlewares?window.PineconeRouterMiddlewares=[t]:window.PineconeRouterMiddlewares.push(t);
//# sourceMappingURL=index.modern.js.map
