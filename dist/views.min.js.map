{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/index.ts"],
  "sourcesContent": ["/**\r\n * This will replace the content fetched from `path` into `selector`.\r\n * The content is assumed to not be an entire html page but a chunk of it.\r\n */\r\nexport function renderContent(\r\n\tcontent: string,\r\n\tselector = window.PineconeRouter.settings.viewSelector ?? '#app'\r\n) {\r\n\t// replace the content of the selector with the fetched content\r\n\tdocument.querySelector(selector)!.innerHTML = content\r\n\t// @ts-ignore\r\n\tdocument.querySelector('[autofocus]')?.focus()\r\n}\r\n", "import { renderContent } from './utils'\r\ndeclare global {\r\n\tinterface Window {\r\n\t\tPineconeRouter: any\r\n\t\tPineconeRouterMiddlewares: any[]\r\n\t\tAlpine: any\r\n\t}\r\n}\r\n\r\nconst PineconeRouterMiddleware = {\r\n\t/**\r\n\t * @property {string} version the version of this middleware.\r\n\t */\r\n\tversion: '3.0.0',\r\n\t/**\r\n\t * @property {string} name the name of the middleware.\r\n\t */\r\n\tname: 'views',\r\n\t/**\r\n\t * Called for each route during initialization,\r\n\t * after the route is processed & added.\r\n\t * @param {Element} el the route's <template> element\r\n\t * @param {string} path the route's path\r\n\t */\r\n\tonAfterRouteProcessed(el, path) {\r\n\t\tif (!el.hasAttribute('x-view')) return\r\n\t\tlet view = el.getAttribute('x-view')\r\n\t\tif (\r\n\t\t\t!(view.startsWith('[') && view.endsWith(']')) &&\r\n\t\t\t!(view.startsWith('Array(') && view.endsWith(')'))\r\n\t\t) {\r\n\t\t\tview = `[\"${view}\"]`\r\n\t\t}\r\n\t\tlet evaluated = new Function('return ' + view)()\r\n\t\tif (path == 'notfound') {\r\n\t\t\twindow.PineconeRouter.notfound.view = evaluated\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// add view to the route\r\n\t\tlet i = window.PineconeRouter.routes.findIndex((r) => r.path == path)\r\n\t\twindow.PineconeRouter.routes[i].view = evaluated\r\n\t},\r\n\t/**\r\n\t * Will be called before the handlers are executed and done.\r\n\t * during navigation (PineconeRouter.navigate()).\r\n\t * @param {object} route the matched route, undefined if not found.\r\n\t * @param {string} path the path visited by the client\r\n\t * @param {boolean} firstload first page load and not link navigation request\r\n\t * @returns {string|null} 'stop' to make the navigate function exit (make sure to send the loadend event); none to continute execution.\r\n\t */\r\n\tonBeforeHandlersExecuted(route, path, firstload) {\r\n\t\twindow.dispatchEvent(window.PineconeRouter.loadStart)\r\n\t},\r\n\r\n\t/**\r\n\t * Will be called after the handlers are executed and done.\r\n\t * during navigation (PineconeRouter.navigate()).\r\n\t * @param {object} route the matched route, undefined if not found.\r\n\t * @param {string} path the path visited by the client\r\n\t * @param {boolean} firstload first page load and not link navigation request\r\n\t * @returns {string|null} 'stop' to make the navigate function exit (make sure to send the loadend event); none to continute execution.\r\n\t */\r\n\tonHandlersExecuted(route, path, firstload) {\r\n\t\tlet views: any[] = !route\r\n\t\t\t? window.PineconeRouter.notfound.view\r\n\t\t\t: route.view\r\n\t\t\t? route.view\r\n\t\t\t: ''\r\n\t\tif (!views) {\r\n\t\t\twindow.dispatchEvent(window.PineconeRouter.loadEnd)\r\n\t\t\treturn\r\n\t\t}\r\n\t\tviews.forEach((view) => {\r\n\t\t\tlet viewPath = ''\r\n\t\t\tif (typeof view == 'string') {\r\n\t\t\t\tviewPath = view\r\n\t\t\t} else if (typeof view == 'object' && view && view.path) {\r\n\t\t\t\tviewPath = view.path\r\n\t\t\t} else {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tfetch(viewPath)\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\treturn response.text()\r\n\t\t\t\t})\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tif (view.selector) {\r\n\t\t\t\t\t\trenderContent(response, view.selector)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trenderContent(response)\r\n\t\t\t\t\t}\r\n\t\t\t\t\twindow.dispatchEvent(window.PineconeRouter.loadEnd)\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\tdocument\r\n\t\t\t\t\t\t.querySelector(\r\n\t\t\t\t\t\t\tview.selector ??\r\n\t\t\t\t\t\t\t\twindow.PineconeRouter.settings.viewSelector ??\r\n\t\t\t\t\t\t\t\t'#app'\r\n\t\t\t\t\t\t)!\r\n\t\t\t\t\t\t.dispatchEvent(\r\n\t\t\t\t\t\t\tnew CustomEvent('fetch-error', { detail: error })\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\tconsole.error(`Pinecone Router: Fetch Error: ${error}`)\r\n\t\t\t\t})\r\n\t\t})\r\n\t},\r\n}\r\n\r\nif (window.PineconeRouterMiddlewares == null)\r\n\twindow.PineconeRouterMiddlewares = [PineconeRouterMiddleware]\r\nelse window.PineconeRouterMiddlewares.push(PineconeRouterMiddleware)\r\n"],
  "mappings": "MAIO,SAASA,EACfC,EACAC,EAAW,OAAO,eAAe,SAAS,cAAgB,OACzD,CAED,SAAS,cAAcA,CAAQ,EAAG,UAAYD,EAE9C,SAAS,cAAc,aAAa,GAAG,MAAM,CAC9C,CCHA,IAAME,EAA2B,CAIhC,QAAS,QAIT,KAAM,QAON,sBAAsBC,EAAIC,EAAM,CAC/B,GAAI,CAACD,EAAG,aAAa,QAAQ,EAAG,OAChC,IAAIE,EAAOF,EAAG,aAAa,QAAQ,EAElC,EAAEE,EAAK,WAAW,GAAG,GAAKA,EAAK,SAAS,GAAG,IAC3C,EAAEA,EAAK,WAAW,QAAQ,GAAKA,EAAK,SAAS,GAAG,KAEhDA,EAAO,KAAKA,OAEb,IAAIC,EAAY,IAAI,SAAS,UAAYD,CAAI,EAAE,EAC/C,GAAID,GAAQ,WAAY,CACvB,OAAO,eAAe,SAAS,KAAOE,EACtC,MACD,CAEA,IAAIC,EAAI,OAAO,eAAe,OAAO,UAAWC,GAAMA,EAAE,MAAQJ,CAAI,EACpE,OAAO,eAAe,OAAOG,GAAG,KAAOD,CACxC,EASA,yBAAyBG,EAAOL,EAAMM,EAAW,CAChD,OAAO,cAAc,OAAO,eAAe,SAAS,CACrD,EAUA,mBAAmBD,EAAOL,EAAMM,EAAW,CAC1C,IAAIC,EAAgBF,EAEjBA,EAAM,KACNA,EAAM,KACN,GAHA,OAAO,eAAe,SAAS,KAIlC,GAAI,CAACE,EAAO,CACX,OAAO,cAAc,OAAO,eAAe,OAAO,EAClD,MACD,CACAA,EAAM,QAASN,GAAS,CACvB,IAAIO,EAAW,GACf,GAAI,OAAOP,GAAQ,SAClBO,EAAWP,UACD,OAAOA,GAAQ,UAAYA,GAAQA,EAAK,KAClDO,EAAWP,EAAK,SAEhB,QAGD,MAAMO,CAAQ,EACZ,KAAMC,GACCA,EAAS,KAAK,CACrB,EACA,KAAMA,GAAa,CACfR,EAAK,SACRS,EAAcD,EAAUR,EAAK,QAAQ,EAErCS,EAAcD,CAAQ,EAEvB,OAAO,cAAc,OAAO,eAAe,OAAO,CACnD,CAAC,EACA,MAAOE,GAAU,CACjB,SACE,cACAV,EAAK,UACJ,OAAO,eAAe,SAAS,cAC/B,MACF,EACC,cACA,IAAI,YAAY,cAAe,CAAE,OAAQU,CAAM,CAAC,CACjD,EACD,QAAQ,MAAM,iCAAiCA,GAAO,CACvD,CAAC,CACH,CAAC,CACF,CACD,EAEI,OAAO,2BAA6B,KACvC,OAAO,0BAA4B,CAACb,CAAwB,EACxD,OAAO,0BAA0B,KAAKA,CAAwB",
  "names": ["renderContent", "content", "selector", "PineconeRouterMiddleware", "el", "path", "view", "evaluated", "i", "r", "route", "firstload", "views", "viewPath", "response", "renderContent", "error"]
}
