{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/index.ts"],
  "sourcesContent": ["/**\n * This will replace the content fetched from `path` into `selector`.\n * The content is assumed to not be an entire html page but a chunk of it.\n */\nexport function renderContent(\n\tcontent: string,\n\tselector = window.PineconeRouter.settings.viewSelector ?? '#app'\n) {\n\t// replace the content of the selector with the fetched content\n\tdocument.querySelector(selector)!.innerHTML = content\n\t// @ts-ignore\n\tdocument.querySelector('[autofocus]')?.focus()\n}\n", "import { renderContent } from './utils'\n\nconst PineconeRouterMiddleware = {\n\t/**\n\t * @property {string} version the version of this middleware.\n\t */\n\tversion: '2.0.0',\n\t/**\n\t * @property {string} name the name of the middleware.\n\t */\n\tname: 'views',\n\t/**\n\t * Called for each route during initialization,\n\t * after the route is processed & added.\n\t * @param {Element} el the route's <template> element\n\t * @param {string} path the route's path\n\t */\n\tonAfterRouteProcessed(el, path) {\n\t\tif (!el.hasAttribute('x-view')) return\n\t\tlet view = el.getAttribute('x-view')\n\t\tif (path == 'notfound') {\n\t\t\twindow.PineconeRouter.notfound.view = view\n\t\t\treturn\n\t\t}\n\t\t// add handlers to the route\n\t\tlet i = window.PineconeRouter.routes.findIndex((r) => r.path == path)\n\t\twindow.PineconeRouter.routes[i].view = view\n\t},\n\t/**\n\t * Will be called before the handlers are executed and done.\n\t * during navigation (PineconeRouter.navigate()).\n\t * @param {object} route the matched route, undefined if not found.\n\t * @param {string} path the path visited by the client\n\t * @param {boolean} firstload first page load and not link navigation request\n\t * @returns {string|null} 'stop' to make the navigate function exit (make sure to send the loadend event); none to continute execution.\n\t */\n\tonBeforeHandlersExecuted(route, path, firstload) {\n\t\twindow.dispatchEvent(window.PineconeRouter.loadStart)\n\t},\n\n\t/**\n\t * Will be called after the handlers are executed and done.\n\t * during navigation (PineconeRouter.navigate()).\n\t * @param {object} route the matched route, undefined if not found.\n\t * @param {string} path the path visited by the client\n\t * @param {boolean} firstload first page load and not link navigation request\n\t * @returns {string|null} 'stop' to make the navigate function exit (make sure to send the loadend event); none to continute execution.\n\t */\n\tonHandlersExecuted(route, path, firstload) {\n\t\tlet view: string = !route\n\t\t\t? window.PineconeRouter.notfound.view\n\t\t\t: route.view\n\t\t\t? route.view\n\t\t\t: ''\n\t\tif (!view) {\n\t\t\twindow.dispatchEvent(window.PineconeRouter.loadEnd)\n\t\t\treturn\n\t\t}\n\t\tif (window.PineconeRouter.viewCache[view]) {\n\t\t\trenderContent(window.PineconeRouter.viewCache[view])\n\t\t\twindow.dispatchEvent(window.PineconeRouter.loadEnd)\n\t\t}\n\t\tfetch(view)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.text()\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\trenderContent(response)\n\t\t\t\twindow.PineconeRouter.viewCache[view] = response\n\t\t\t\twindow.dispatchEvent(window.PineconeRouter.loadEnd)\n\t\t\t\treturn false\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tdocument\n\t\t\t\t\t.querySelector(\n\t\t\t\t\t\twindow.PineconeRouter.settings.viewSelector ?? '#app'\n\t\t\t\t\t)!\n\t\t\t\t\t.dispatchEvent(\n\t\t\t\t\t\tnew CustomEvent('fetch-error', { detail: error })\n\t\t\t\t\t)\n\t\t\t\tconsole.error(`Pinecone Router: Fetch Error: ${error}`)\n\t\t\t})\n\t},\n}\n\nif (window.PineconeRouterMiddlewares == null)\n\twindow.PineconeRouterMiddlewares = [PineconeRouterMiddleware]\nelse window.PineconeRouterMiddlewares.push(PineconeRouterMiddleware)\n"],
  "mappings": "MAIO,SAASA,EACfC,EACAC,EAAW,OAAO,eAAe,SAAS,cAAgB,OACzD,CAED,SAAS,cAAcA,CAAQ,EAAG,UAAYD,EAE9C,SAAS,cAAc,aAAa,GAAG,MAAM,CAC9C,CCVA,IAAME,EAA2B,CAIhC,QAAS,QAIT,KAAM,QAON,sBAAsBC,EAAIC,EAAM,CAC/B,GAAI,CAACD,EAAG,aAAa,QAAQ,EAAG,OAChC,IAAIE,EAAOF,EAAG,aAAa,QAAQ,EACnC,GAAIC,GAAQ,WAAY,CACvB,OAAO,eAAe,SAAS,KAAOC,EACtC,MACD,CAEA,IAAIC,EAAI,OAAO,eAAe,OAAO,UAAWC,GAAMA,EAAE,MAAQH,CAAI,EACpE,OAAO,eAAe,OAAOE,GAAG,KAAOD,CACxC,EASA,yBAAyBG,EAAOJ,EAAMK,EAAW,CAChD,OAAO,cAAc,OAAO,eAAe,SAAS,CACrD,EAUA,mBAAmBD,EAAOJ,EAAMK,EAAW,CAC1C,IAAIJ,EAAgBG,EAEjBA,EAAM,KACNA,EAAM,KACN,GAHA,OAAO,eAAe,SAAS,KAIlC,GAAI,CAACH,EAAM,CACV,OAAO,cAAc,OAAO,eAAe,OAAO,EAClD,MACD,CACI,OAAO,eAAe,UAAUA,KACnCK,EAAc,OAAO,eAAe,UAAUL,EAAK,EACnD,OAAO,cAAc,OAAO,eAAe,OAAO,GAEnD,MAAMA,CAAI,EACR,KAAMM,GACCA,EAAS,KAAK,CACrB,EACA,KAAMA,IACND,EAAcC,CAAQ,EACtB,OAAO,eAAe,UAAUN,GAAQM,EACxC,OAAO,cAAc,OAAO,eAAe,OAAO,EAC3C,GACP,EACA,MAAOC,GAAU,CACjB,SACE,cACA,OAAO,eAAe,SAAS,cAAgB,MAChD,EACC,cACA,IAAI,YAAY,cAAe,CAAE,OAAQA,CAAM,CAAC,CACjD,EACD,QAAQ,MAAM,iCAAiCA,GAAO,CACvD,CAAC,CACH,CACD,EAEI,OAAO,2BAA6B,KACvC,OAAO,0BAA4B,CAACV,CAAwB,EACxD,OAAO,0BAA0B,KAAKA,CAAwB",
  "names": ["renderContent", "content", "selector", "PineconeRouterMiddleware", "el", "path", "view", "i", "r", "route", "firstload", "renderContent", "response", "error"]
}
